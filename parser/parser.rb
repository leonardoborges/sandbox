#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

#
# generated by racc
#
require File.expand_path(File.join(File.dirname(__FILE__), "../", "lexer", "lexer.rex.rb"))
require File.expand_path(File.join(File.dirname(__FILE__), "../", "ast", "nodes.rb"))
class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 127)


def parse(code)
  @lexer = Lexer.new
  @lexer.scan_setup(code)
  @tokens = []
  while t = @lexer.next_token
    @tokens.push t
  end
  @tokens.reverse!
  do_parse
end

def next_token
  token = @tokens.pop
  return if !token
  get_ttoken(token, @tokens)
end

def get_ttoken(token, tokens)
  if (token.is_a? Array) && (token[0] == :IDENTIFIER)
    next_token = tokens.pop
    if(next_token && (next_token[0] == "("))
      return [:IDENTIFIER_LPAREN, token[1]]
    else
      tokens.push(next_token)
    end
  elsif (token[0] == :WHITESPACE)
    return get_ttoken(tokens.pop, tokens)
  end
  return token
end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    15,    16,    25,     4,    11,    12,    14,    13,    15,    16,
    22,     4,    11,    12,    14,    13,    15,    16,    20,     4,
    11,    12,    14,    13,    17,    20,    20,    20,    21,    41,
    42,   -40,    17,    34,    35,    21,    21,    21,    15,    16,
    17,     4,    11,    12,    14,    13,    15,    16,    55,     4,
    11,    12,    14,    13,    15,    16,    20,     4,    11,    12,
    14,    13,    17,    70,    68,    65,    21,    50,    15,    16,
    17,     4,    11,    12,    14,    13,    15,    16,    17,     4,
    11,    12,    14,    13,    67,    33,    50,    52,    22,    53,
    15,    16,    17,     4,    11,    12,    14,    13,    15,    16,
    17,     4,    11,    12,    14,    13,    15,    16,    20,     4,
    11,    12,    14,    13,    17,    49,    71,    50,    21,    72,
    15,    16,    17,     4,    11,    12,    14,    13,    15,    16,
    17,     4,    11,    12,    14,    13,    15,    16,    20,     4,
    11,    12,    14,    13,    17,    64,    73,    65,    21,    39,
    15,    16,    17,     4,    11,    12,    14,    13,    15,    16,
    17,     4,    11,    12,    14,    13,    15,    16,    25,     4,
    11,    12,    14,    13,    17,    75,    22,    57,    77,    18,
    15,    16,    17,     4,    11,    12,    14,    13,    15,    16,
    17,     4,    11,    12,    14,    13,    27,    28,    55,    25,
    79,    23,    24,    26,    17,    80,    81,    22,    50,    56,
    27,    28,    17,    25,    83,    23,    24,    26,   nil,    27,
    28,    22,    25,   nil,    23,    24,    26,   nil,    27,   nil,
    22,    25,   nil,    23,    24,    26,   nil,    27,    28,    22,
    25,   nil,    23,    24,    26,   nil,    27,    28,    22,    25,
   nil,    23,    24,    26,   nil,    27,    28,    22,    25,   nil,
    23,    24,    26,   nil,    27,    28,    22,    25,   nil,    23,
    24,    26,   nil,    27,    28,    22,    25,   nil,    23,    24,
    26,   nil,   nil,    25,    22,    23,    24,   nil,   nil,   nil,
    25,    22,    23,    24,    26,   nil,   nil,   nil,    22 ]

racc_action_check = [
     0,     0,    44,     0,     0,     0,     0,     0,    74,    74,
    44,    74,    74,    74,    74,    74,    62,    62,    71,    62,
    62,    62,    62,    62,     0,    75,    69,    52,    71,    22,
    22,    74,    74,    15,    15,    75,    69,    52,    50,    50,
    62,    50,    50,    50,    50,    50,     4,     4,    53,     4,
     4,     4,     4,     4,    13,    13,     2,    13,    13,    13,
    13,    13,    50,    63,    61,    63,     2,    58,    14,    14,
     4,    14,    14,    14,    14,    14,    42,    42,    13,    42,
    42,    42,    42,    42,    59,    14,    59,    34,    45,    34,
    16,    16,    14,    16,    16,    16,    16,    16,    17,    17,
    42,    17,    17,    17,    17,    17,    41,    41,    56,    41,
    41,    41,    41,    41,    16,    30,    64,    30,    56,    65,
    19,    19,    17,    19,    19,    19,    19,    19,    33,    33,
    41,    33,    33,    33,    33,    33,    23,    23,    80,    23,
    23,    23,    23,    23,    19,    54,    66,    54,    80,    18,
    24,    24,    33,    24,    24,    24,    24,    24,    25,    25,
    23,    25,    25,    25,    25,    25,    28,    28,    43,    28,
    28,    28,    28,    28,    24,    70,    43,    37,    73,     1,
    27,    27,    25,    27,    27,    27,    27,    27,    26,    26,
    28,    26,    26,    26,    26,    26,    36,    36,    35,    36,
    76,    36,    36,    36,    27,    77,    78,    36,    32,    36,
    51,    51,    26,    51,    82,    51,    51,    51,   nil,    31,
    31,    51,    31,   nil,    31,    31,    31,   nil,    48,   nil,
    31,    48,   nil,    48,    48,    48,   nil,    60,    60,    48,
    60,   nil,    60,    60,    60,   nil,     3,     3,    60,     3,
   nil,     3,     3,     3,   nil,    40,    40,     3,    40,   nil,
    40,    40,    40,   nil,    29,    29,    40,    29,   nil,    29,
    29,    29,   nil,    38,    38,    29,    38,   nil,    38,    38,
    38,   nil,   nil,    46,    38,    46,    46,   nil,   nil,   nil,
    47,    46,    47,    47,    47,   nil,   nil,   nil,    47 ]

racc_action_pointer = [
    -2,   179,    46,   235,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    52,    66,    25,    88,    96,   149,   118,
   nil,   nil,    21,   134,   148,   156,   186,   178,   164,   253,
    94,   208,   185,   126,    63,   190,   185,   156,   262,   nil,
   244,   104,    74,   154,   -12,    66,   269,   276,   217,   nil,
    36,   199,    17,    40,   124,   nil,    98,   nil,    44,    63,
   226,    39,    14,    42,    92,   111,   121,   nil,   nil,    16,
   151,     8,   nil,   174,     6,    15,   175,   181,   181,   nil,
   128,   nil,   189,   nil ]

racc_action_default = [
    -1,   -41,    -2,    -3,   -41,    -7,    -8,    -9,   -10,   -11,
   -12,   -15,   -16,   -21,   -21,   -41,   -41,   -41,   -41,    -5,
   -13,   -14,   -41,   -41,   -41,   -41,   -41,   -41,   -41,    -6,
   -41,   -22,   -18,   -41,   -41,   -37,   -41,   -12,   -41,    84,
    -4,   -21,   -21,   -30,   -31,   -32,   -33,   -34,   -35,   -17,
   -41,   -24,   -41,   -37,   -41,   -38,   -41,   -36,   -19,   -41,
   -23,   -41,   -41,   -41,   -41,   -41,   -41,   -20,   -25,   -41,
   -41,   -41,   -39,   -28,    -5,   -41,   -41,   -41,   -41,   -26,
   -41,   -27,   -41,   -29 ]

racc_goto_table = [
     3,    19,     2,    54,    29,    37,    30,    32,     1,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    36,    38,    61,    40,
   nil,    63,    66,    43,    44,    45,    46,    47,    48,   nil,
   nil,   nil,   nil,    51,    58,    59,   nil,    76,   nil,   nil,
   nil,    78,   nil,   nil,   nil,   nil,    82,   nil,   nil,   nil,
    60,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3,   nil,    69,   nil,   nil,   nil,    74,   nil,
   nil,   nil,   nil,   nil,    40 ]

racc_goto_check = [
     3,     4,     2,    13,     3,    10,    11,    11,     1,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,     3,    12,     3,
   nil,    13,    12,     3,     3,     3,     3,     3,     3,   nil,
   nil,   nil,   nil,     3,    11,    11,   nil,    12,   nil,   nil,
   nil,    12,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,
     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3,   nil,     2,   nil,   nil,   nil,     4,   nil,
   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     8,     2,     0,    -1,   nil,   nil,   nil,   nil,   nil,
   -12,    -7,   -34,   -32 ]

racc_goto_default = [
   nil,   nil,   nil,    31,    62,     5,     6,     7,     8,     9,
    10,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 28, :_reduce_1,
  1, 28, :_reduce_2,
  1, 29, :_reduce_3,
  3, 29, :_reduce_4,
  2, 29, :_reduce_5,
  2, 30, :_reduce_6,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 32, :_reduce_15,
  1, 32, :_reduce_16,
  3, 33, :_reduce_17,
  2, 33, :_reduce_18,
  4, 33, :_reduce_19,
  5, 33, :_reduce_20,
  0, 38, :_reduce_21,
  1, 38, :_reduce_22,
  3, 38, :_reduce_23,
  3, 34, :_reduce_24,
  5, 35, :_reduce_25,
  7, 35, :_reduce_26,
  8, 35, :_reduce_27,
  5, 36, :_reduce_28,
  9, 36, :_reduce_29,
  3, 37, :_reduce_30,
  3, 37, :_reduce_31,
  3, 37, :_reduce_32,
  3, 37, :_reduce_33,
  3, 37, :_reduce_34,
  3, 37, :_reduce_35,
  3, 37, :_reduce_36,
  0, 40, :_reduce_37,
  1, 40, :_reduce_38,
  3, 40, :_reduce_39,
  3, 39, :_reduce_40 ]

racc_reduce_n = 41

racc_shift_n = 84

racc_token_table = {
  false => 0,
  :error => 1,
  :FUNC => 2,
  :IF => 3,
  :ELSE => 4,
  :RETURN => 5,
  :NUMBER => 6,
  :STRING => 7,
  :IDENTIFIER => 8,
  :IDENTIFIER_LPAREN => 9,
  :NEWLINE => 10,
  :EQUALS => 11,
  :OP_OR => 12,
  "++" => 13,
  "*" => 14,
  "/" => 15,
  "+" => 16,
  "-" => 17,
  ">" => 18,
  "=" => 19,
  ";" => 20,
  ")" => 21,
  "." => 22,
  "," => 23,
  "{" => 24,
  "}" => 25,
  "(" => 26 }

racc_nt_base = 27

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "FUNC",
  "IF",
  "ELSE",
  "RETURN",
  "NUMBER",
  "STRING",
  "IDENTIFIER",
  "IDENTIFIER_LPAREN",
  "NEWLINE",
  "EQUALS",
  "OP_OR",
  "\"++\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\"=\"",
  "\";\"",
  "\")\"",
  "\".\"",
  "\",\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Assign",
  "Func",
  "Conditional",
  "Operation",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 27)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_6(val, _values, result)
     result = ReturnNode.new(val[0][1], val[1]); 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_15(val, _values, result)
     result = LiteralNode.new(val[0][1], val[0][0]); 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_16(val, _values, result)
     result = LiteralNode.new(val[0][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_17(val, _values, result)
     result = CallNode.new(val[0][1], nil, val[0][0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_18(val, _values, result)
     result = CallNode.new(val[0][1], nil, val[0][0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_19(val, _values, result)
     result = CallNode.new(val[2][1], val[0], val[2][0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_20(val, _values, result)
     result = CallNode.new(val[2][1], val[0], val[2][0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_21(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_22(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_23(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_24(val, _values, result)
     result = SetLocalNode.new(val[0][1], val[0][0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_25(val, _values, result)
     result = FuncNode.new(val[0][1], val[1][0], [], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_26(val, _values, result)
     result = FuncNode.new(val[0][1], val[1][0], val[2], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_27(val, _values, result)
     result = FuncNode.new(val[0][1], val[1][0], val[3], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_28(val, _values, result)
     result = IfNode.new(val[0][1], val[1], val[3], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_29(val, _values, result)
     result = IfNode.new(val[0][1], val[1], val[3], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_30(val, _values, result)
     result = PlusNode.new(val[1][1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_31(val, _values, result)
     result = MinusNode.new(val[1][1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_32(val, _values, result)
     result = TimesNode.new(val[1][1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_33(val, _values, result)
     result = GtNode.new(val[1][1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_34(val, _values, result)
     result = EqualsNode.new(val[1][1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_35(val, _values, result)
     result = OrNode.new(val[1][1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_36(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_37(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_38(val, _values, result)
     result = [val[0][0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_39(val, _values, result)
     result = val[0] << val[2][0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_40(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
